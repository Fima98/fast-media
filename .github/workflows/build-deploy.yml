name: Build and Deploy

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    build:
        environment:
            name: testing
        env:
            DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
            DATABASE_PORT: ${{secrets.DATABASE_PORT}}
            DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
            DATABASE_NAME: ${{secrets.DATABASE_NAME}}
            DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
            SECRET_KEY: ${{secrets.SECRET_KEY}}
            ALGORITHM: ${{secrets.ALGORITHM}}
            ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
                    POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd "pg_isready -U postgres"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python 3.11
              uses: actions/setup-python@v5.3.0
              with:
                  python-version: "3.11"

            - name: Upgrade pip and install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Run tests with Pytest
              run: pytest

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push Docker image
              run: |
                  docker-compose -f docker-compose.yml build
                  docker-compose -f docker-compose.yml push

    deploy:
        runs-on: ubuntu-latest
        needs: build
        environment:
            name: production
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to Heroku
              uses: akhileshns/heroku-deploy@v3.12.12
              with:
                  heroku_api_key: ${{secrets.HEROKU_API_KEY}}
                  heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
                  heroku_email: ${{secrets.HEROKU_EMAIL}}

            # Uncomment this block if you need to deploy to an Ubuntu server
            # - name: Deploy to Ubuntu server
            #   uses: appleboy/ssh-action@master
            #   with:
            #     host: ${{secrets.PROD_HOST}}
            #     username: ${{secrets.PROD_USERNAME}}
            #     password: ${{secrets.PROD_PASSWORD}}
            #     script: |
            #       cd app/src
            #       git pull
            #       echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api
